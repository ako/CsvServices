// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package csvservices.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import csvservices.impl.CsvImporter;
import csvservices.impl.CsvServicesImpl;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.URI;
import java.net.URL;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.zip.GZIPInputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class ImportCsvUrlData extends CustomJavaAction<java.lang.Long>
{
	private java.lang.String Entity;
	private java.lang.String CsvUrl;
	private java.lang.Long MaxRecords;
	private java.lang.Boolean HasHeader;
	private java.lang.String AlternativeHeader;
	private java.lang.String Delimiter;

	public ImportCsvUrlData(IContext context, java.lang.String Entity, java.lang.String CsvUrl, java.lang.Long MaxRecords, java.lang.Boolean HasHeader, java.lang.String AlternativeHeader, java.lang.String Delimiter)
	{
		super(context);
		this.Entity = Entity;
		this.CsvUrl = CsvUrl;
		this.MaxRecords = MaxRecords;
		this.HasHeader = HasHeader;
		this.AlternativeHeader = AlternativeHeader;
		this.Delimiter = Delimiter;
	}

	@java.lang.Override
	public java.lang.Long executeAction() throws Exception
	{
		// BEGIN USER CODE
        logger.info("executeAction: " + this.Entity + ", " + Arrays.toString(this.Entity.split("\\.")));
        Long objectsCreated = 0l;
        CsvImporter csvImporter = new CsvImporter();
        String moduleName = this.Entity.split("\\.")[0];
        String entityName = this.Entity.split("\\.")[1];
        if (this.MaxRecords == null) {
            this.MaxRecords = new Long(-1);
        }
        URL csvUrl = new URL(this.CsvUrl);
        InputStream is = null;
        try {
            if (this.CsvUrl.endsWith(".gz") || this.CsvUrl.endsWith(".gzip")) {
                is = new GZIPInputStream(csvUrl.openStream());
            } else if (this.CsvUrl.contains(".zip#")){
                // reading specific file from zip
                String fileName = this.CsvUrl.substring(this.CsvUrl.indexOf(".zip#") + 5);
                ZipInputStream zis = new ZipInputStream(csvUrl.openStream());
                ZipEntry ze = zis.getNextEntry();
                while(ze != null){
                    String name = ze.getName();
                    System.out.println(String.format("entry: %s",name));
                    if(name.equals(fileName)){
                        System.out.println("found entry");
                        is = zis;
                        break;
                    }
                    ze = zis.getNextEntry();
                }
                if(is == null){
                    throw new FileNotFoundException(String.format("Zipfile not found: %s in %s",fileName,csvUrl));
                }
            } else {
                is = csvUrl.openStream();
            }
            try (StringWriter outputWriter = new StringWriter()) {
                objectsCreated = new Long(csvImporter.csvToEntities(getContext(), outputWriter, moduleName, entityName, is, false, this.MaxRecords.intValue(), this.HasHeader, this.AlternativeHeader, this.Delimiter));
                logger.info("Done importing: " + outputWriter.toString());
            }
        } catch (Exception e) {
            logger.warn("csv import failed: " + e.getMessage());
            logger.error(e);
        } finally {
            if (is != null) {
                is.close();
            }
        }
        return objectsCreated;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ImportCsvUrlData";
	}

	// BEGIN EXTRA CODE
    private static ILogNode logger = Core.getLogger(CsvServicesImpl.LOG_NORE);

	// END EXTRA CODE
}
