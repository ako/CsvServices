// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package csvservices.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import csvservices.impl.CsvRestHandler;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * 
 */
public class CsvExportInitializeAction extends CustomJavaAction<Boolean>
{
	public CsvExportInitializeAction(IContext context)
	{
		super(context);
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
        boolean isSandbox = Core.getConfiguration().getApplicationRootUrl().contains(".mendixcloud.com") && "DEVELOPMENT".equalsIgnoreCase(Core.getConfiguration().getDTAPMode().toString());
        isSandbox = true;
        if (isSandbox) {
            startSandboxCompatibilityMode(this.getContext());
        } else {
            Core.addRequestHandler(CsvRestHandler.serviceRoot, new CsvRestHandler(this.getContext()));
        }
        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "CsvExportInitializeAction";
	}

	// BEGIN EXTRA CODE
    private static ILogNode logger = Core.getLogger(CsvExportInitializeAction.class.getName());

    private static void startSandboxCompatibilityMode(IContext context) {
        CsvRestHandler.serviceRoot = "ws-doc/";
        final IContext ctx = context;
        new Thread() {
            @Override
            public void run() {
                boolean started = false;
                HttpURLConnection conn = null;
                while (!started) {
                    try {
                        Thread.sleep(1000);
                        URL wsUrl = new URL(Core.getConfiguration().getApplicationRootUrl() + "/ws/");
                        conn = (HttpURLConnection) wsUrl.openConnection();
                        conn.setRequestMethod("GET");
                        InputStream is = conn.getInputStream();
                        logger.info("Connection opened to ws/: " + conn.getResponseCode());
                        started = (conn != null && conn.getResponseCode() != HttpURLConnection.HTTP_BAD_GATEWAY);
                        logger.info("ws started: " + started);
                    } catch (IOException e) {
                        try {
                            logger.info("Failed to open connection to ws/: " + conn.getResponseCode());
                            started = (conn != null && conn.getResponseCode() != HttpURLConnection.HTTP_BAD_GATEWAY);
                        } catch (Exception e2) {
                            logger.info(e2);
                        }
                    } catch (Exception e) {
                        logger.warn("Error when trying to start sandbox mode: " + e.getMessage(), e);
                        break;
                    }
                }
                Core.addRequestHandler(CsvRestHandler.serviceRoot, new CsvRestHandler(ctx));
            }
        }.start();
    }
	// END EXTRA CODE
}
