// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package orders.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class Products
{
	private final IMendixObject productsMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "Orders.Products";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ProductId("ProductId"),
		Name("Name"),
		Description("Description"),
		Price("Price"),
		Product_Labels("Orders.Product_Labels");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public Products(IContext context)
	{
		this(context, Core.instantiate(context, "Orders.Products"));
	}

	protected Products(IContext context, IMendixObject productsMendixObject)
	{
		if (productsMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("Orders.Products", productsMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a Orders.Products");

		this.productsMendixObject = productsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Products.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static orders.proxies.Products initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return orders.proxies.Products.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static orders.proxies.Products initialize(IContext context, IMendixObject mendixObject)
	{
		return new orders.proxies.Products(context, mendixObject);
	}

	public static orders.proxies.Products load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return orders.proxies.Products.initialize(context, mendixObject);
	}

	public static java.util.List<orders.proxies.Products> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<orders.proxies.Products> result = new java.util.ArrayList<orders.proxies.Products>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//Orders.Products" + xpathConstraint))
			result.add(orders.proxies.Products.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of ProductId
	 */
	public final Long getProductId()
	{
		return getProductId(getContext());
	}

	/**
	 * @param context
	 * @return value of ProductId
	 */
	public final Long getProductId(IContext context)
	{
		return (Long) getMendixObject().getValue(context, MemberNames.ProductId.toString());
	}

	/**
	 * Set value of ProductId
	 * @param productid
	 */
	public final void setProductId(Long productid)
	{
		setProductId(getContext(), productid);
	}

	/**
	 * Set value of ProductId
	 * @param context
	 * @param productid
	 */
	public final void setProductId(IContext context, Long productid)
	{
		getMendixObject().setValue(context, MemberNames.ProductId.toString(), productid);
	}

	/**
	 * @return value of Name
	 */
	public final String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final String getName(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(IContext context, String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of Description
	 */
	public final String getDescription()
	{
		return getDescription(getContext());
	}

	/**
	 * @param context
	 * @return value of Description
	 */
	public final String getDescription(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Description.toString());
	}

	/**
	 * Set value of Description
	 * @param description
	 */
	public final void setDescription(String description)
	{
		setDescription(getContext(), description);
	}

	/**
	 * Set value of Description
	 * @param context
	 * @param description
	 */
	public final void setDescription(IContext context, String description)
	{
		getMendixObject().setValue(context, MemberNames.Description.toString(), description);
	}

	/**
	 * @return value of Price
	 */
	public final Double getPrice()
	{
		return getPrice(getContext());
	}

	/**
	 * @param context
	 * @return value of Price
	 */
	public final Double getPrice(IContext context)
	{
		return (Double) getMendixObject().getValue(context, MemberNames.Price.toString());
	}

	/**
	 * Set value of Price
	 * @param price
	 */
	public final void setPrice(Double price)
	{
		setPrice(getContext(), price);
	}

	/**
	 * Set value of Price
	 * @param context
	 * @param price
	 */
	public final void setPrice(IContext context, Double price)
	{
		getMendixObject().setValue(context, MemberNames.Price.toString(), price);
	}

	/**
	 * @return value of Product_Labels
	 */
	public final java.util.List<orders.proxies.ProductLabels> getProduct_Labels() throws CoreException
	{
		return getProduct_Labels(getContext());
	}

	/**
	 * @param context
	 * @return value of Product_Labels
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<orders.proxies.ProductLabels> getProduct_Labels(IContext context) throws CoreException
	{
		java.util.List<orders.proxies.ProductLabels> result = new java.util.ArrayList<orders.proxies.ProductLabels>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Product_Labels.toString());
		if (valueObject == null)
			return result;
		for (IMendixObject mendixObject : Core.retrieveIdList(context, (java.util.List<IMendixIdentifier>) valueObject))
			result.add(orders.proxies.ProductLabels.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of Product_Labels
	 * @param product_labels
	 */
	public final void setProduct_Labels(java.util.List<orders.proxies.ProductLabels> product_labels)
	{
		setProduct_Labels(getContext(), product_labels);
	}

	/**
	 * Set value of Product_Labels
	 * @param context
	 * @param product_labels
	 */
	public final void setProduct_Labels(IContext context, java.util.List<orders.proxies.ProductLabels> product_labels)
	{
		java.util.List<IMendixIdentifier> identifiers = new java.util.ArrayList<IMendixIdentifier>();
		for (orders.proxies.ProductLabels proxyObject : product_labels)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.Product_Labels.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return productsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final orders.proxies.Products that = (orders.proxies.Products) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "Orders.Products";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
