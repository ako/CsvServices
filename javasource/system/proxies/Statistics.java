// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package system.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class Statistics
{
	private final IMendixObject statisticsMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "System.Statistics";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		MaxNumberOfConcurrentUsers("MaxNumberOfConcurrentUsers"),
		MaxNumberOfAnonymousConcurrentUsers("MaxNumberOfAnonymousConcurrentUsers"),
		MaxNumberOfNamedUsers("MaxNumberOfNamedUsers"),
		LastUpdate("LastUpdate"),
		ClusterManager("System.ClusterManager");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public Statistics(IContext context)
	{
		this(context, Core.instantiate(context, "System.Statistics"));
	}

	protected Statistics(IContext context, IMendixObject statisticsMendixObject)
	{
		if (statisticsMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("System.Statistics", statisticsMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a System.Statistics");

		this.statisticsMendixObject = statisticsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Statistics.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static system.proxies.Statistics initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return system.proxies.Statistics.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static system.proxies.Statistics initialize(IContext context, IMendixObject mendixObject)
	{
		return new system.proxies.Statistics(context, mendixObject);
	}

	public static system.proxies.Statistics load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return system.proxies.Statistics.initialize(context, mendixObject);
	}

	public static java.util.List<system.proxies.Statistics> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<system.proxies.Statistics> result = new java.util.ArrayList<system.proxies.Statistics>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//System.Statistics" + xpathConstraint))
			result.add(system.proxies.Statistics.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of MaxNumberOfConcurrentUsers
	 */
	public final Integer getMaxNumberOfConcurrentUsers()
	{
		return getMaxNumberOfConcurrentUsers(getContext());
	}

	/**
	 * @param context
	 * @return value of MaxNumberOfConcurrentUsers
	 */
	public final Integer getMaxNumberOfConcurrentUsers(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.MaxNumberOfConcurrentUsers.toString());
	}

	/**
	 * Set value of MaxNumberOfConcurrentUsers
	 * @param maxnumberofconcurrentusers
	 */
	public final void setMaxNumberOfConcurrentUsers(Integer maxnumberofconcurrentusers)
	{
		setMaxNumberOfConcurrentUsers(getContext(), maxnumberofconcurrentusers);
	}

	/**
	 * Set value of MaxNumberOfConcurrentUsers
	 * @param context
	 * @param maxnumberofconcurrentusers
	 */
	public final void setMaxNumberOfConcurrentUsers(IContext context, Integer maxnumberofconcurrentusers)
	{
		getMendixObject().setValue(context, MemberNames.MaxNumberOfConcurrentUsers.toString(), maxnumberofconcurrentusers);
	}

	/**
	 * @return value of MaxNumberOfAnonymousConcurrentUsers
	 */
	public final Integer getMaxNumberOfAnonymousConcurrentUsers()
	{
		return getMaxNumberOfAnonymousConcurrentUsers(getContext());
	}

	/**
	 * @param context
	 * @return value of MaxNumberOfAnonymousConcurrentUsers
	 */
	public final Integer getMaxNumberOfAnonymousConcurrentUsers(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.MaxNumberOfAnonymousConcurrentUsers.toString());
	}

	/**
	 * Set value of MaxNumberOfAnonymousConcurrentUsers
	 * @param maxnumberofanonymousconcurrentusers
	 */
	public final void setMaxNumberOfAnonymousConcurrentUsers(Integer maxnumberofanonymousconcurrentusers)
	{
		setMaxNumberOfAnonymousConcurrentUsers(getContext(), maxnumberofanonymousconcurrentusers);
	}

	/**
	 * Set value of MaxNumberOfAnonymousConcurrentUsers
	 * @param context
	 * @param maxnumberofanonymousconcurrentusers
	 */
	public final void setMaxNumberOfAnonymousConcurrentUsers(IContext context, Integer maxnumberofanonymousconcurrentusers)
	{
		getMendixObject().setValue(context, MemberNames.MaxNumberOfAnonymousConcurrentUsers.toString(), maxnumberofanonymousconcurrentusers);
	}

	/**
	 * @return value of MaxNumberOfNamedUsers
	 */
	public final Integer getMaxNumberOfNamedUsers()
	{
		return getMaxNumberOfNamedUsers(getContext());
	}

	/**
	 * @param context
	 * @return value of MaxNumberOfNamedUsers
	 */
	public final Integer getMaxNumberOfNamedUsers(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.MaxNumberOfNamedUsers.toString());
	}

	/**
	 * Set value of MaxNumberOfNamedUsers
	 * @param maxnumberofnamedusers
	 */
	public final void setMaxNumberOfNamedUsers(Integer maxnumberofnamedusers)
	{
		setMaxNumberOfNamedUsers(getContext(), maxnumberofnamedusers);
	}

	/**
	 * Set value of MaxNumberOfNamedUsers
	 * @param context
	 * @param maxnumberofnamedusers
	 */
	public final void setMaxNumberOfNamedUsers(IContext context, Integer maxnumberofnamedusers)
	{
		getMendixObject().setValue(context, MemberNames.MaxNumberOfNamedUsers.toString(), maxnumberofnamedusers);
	}

	/**
	 * @return value of LastUpdate
	 */
	public final java.util.Date getLastUpdate()
	{
		return getLastUpdate(getContext());
	}

	/**
	 * @param context
	 * @return value of LastUpdate
	 */
	public final java.util.Date getLastUpdate(IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.LastUpdate.toString());
	}

	/**
	 * Set value of LastUpdate
	 * @param lastupdate
	 */
	public final void setLastUpdate(java.util.Date lastupdate)
	{
		setLastUpdate(getContext(), lastupdate);
	}

	/**
	 * Set value of LastUpdate
	 * @param context
	 * @param lastupdate
	 */
	public final void setLastUpdate(IContext context, java.util.Date lastupdate)
	{
		getMendixObject().setValue(context, MemberNames.LastUpdate.toString(), lastupdate);
	}

	/**
	 * @return value of ClusterManager
	 */
	public final system.proxies.XASInstance getClusterManager() throws CoreException
	{
		return getClusterManager(getContext());
	}

	/**
	 * @param context
	 * @return value of ClusterManager
	 */
	public final system.proxies.XASInstance getClusterManager(IContext context) throws CoreException
	{
		system.proxies.XASInstance result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ClusterManager.toString());
		if (identifier != null)
			result = system.proxies.XASInstance.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ClusterManager
	 * @param clustermanager
	 */
	public final void setClusterManager(system.proxies.XASInstance clustermanager)
	{
		setClusterManager(getContext(), clustermanager);
	}

	/**
	 * Set value of ClusterManager
	 * @param context
	 * @param clustermanager
	 */
	public final void setClusterManager(IContext context, system.proxies.XASInstance clustermanager)
	{
		if (clustermanager == null)
			getMendixObject().setValue(context, MemberNames.ClusterManager.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ClusterManager.toString(), clustermanager.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return statisticsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final system.proxies.Statistics that = (system.proxies.Statistics) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "System.Statistics";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
