// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxdbutils.actions;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.function.Function;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.webui.CustomJavaAction;
import mxdbutils.helpers.DbHelper;

/**
 * This entity will truncate the table of the entity and all its association tables.
 * Do not apply on:
 *  - FileDocuments
 *  - Entities used in inheritance (either specializations or generalizations)
 * 
 */
public class TruncateEntity extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String entity;

	public TruncateEntity(IContext context, java.lang.String entity)
	{
		super(context);
		this.entity = entity;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		return Core.dataStorage().executeWithConnection(getContext(), truncateTable(entity));
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "TruncateEntity";
	}

	// BEGIN EXTRA CODE
	private Function<Connection, Boolean> truncateTable(String entity) {
		
		return connection -> {
			
			try {
				ILogNode logger = Core.getLogger(this.getClass().getSimpleName());
				IMetaObject metaObject = Core.getMetaObject(entity);
				
				logger.info("Truncating entity table " + Core.getDatabaseTableName(metaObject));
				{
					Statement stat = connection.createStatement();
					stat.executeUpdate("TRUNCATE TABLE " + DbHelper.escapeIdentifier(connection, 
							Core.getDatabaseTableName(metaObject)));
					stat.close();
				}

				truncateAssocationTables(connection, metaObject.getMetaAssociationsChild());
				truncateAssocationTables(connection, metaObject.getMetaAssociationsParent());
				truncateAssocationTables(connection, metaObject.getDeclaredMetaAssociationsChild());
				truncateAssocationTables(connection, metaObject.getDeclaredMetaAssociationsParent());
				
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
			
			return true;
		};
	}
	
	private void truncateAssocationTables(Connection connection, Collection<? extends IMetaAssociation> associations) throws SQLException {
		ILogNode logger = Core.getLogger(this.getClass().getSimpleName());
		for (IMetaAssociation association : associations) {
			if (!association.getChild().isPersistable() || !association.getParent().isPersistable())
				continue;
			
			String tableName = Core.getDatabaseTableName(association);
			logger.info("Truncating association table " + tableName);
			
			Statement stat = connection.createStatement();
			stat.executeUpdate("TRUNCATE TABLE " + DbHelper.escapeIdentifier(connection, tableName));
			stat.close();
		}
	}
	// END EXTRA CODE
}
