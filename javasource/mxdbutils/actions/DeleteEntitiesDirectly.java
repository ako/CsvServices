// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxdbutils.actions;

import java.sql.Connection;
import java.sql.Statement;
import java.util.HashSet;
import java.util.function.Function;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.webui.CustomJavaAction;

/**
 * Performs deletion on items directly, without having to retrieve them.
 * Will definately speed up cleaning actions on large batches.
 * 
 * Do not apply on:
 *  - FileDocuments
 *  - Entities used in inheritance (either specializations or generalizations)
 * 
 */
public class DeleteEntitiesDirectly extends CustomJavaAction<java.lang.Long>
{
	private java.lang.String entity;
	private java.lang.String constraint;

	public DeleteEntitiesDirectly(IContext context, java.lang.String entity, java.lang.String constraint)
	{
		super(context);
		this.entity = entity;
		this.constraint = constraint;
	}

	@java.lang.Override
	public java.lang.Long executeAction() throws Exception
	{
		// BEGIN USER CODE
		Long result = Core.dataStorage().executeWithConnection(getContext(), deleteEntities( entity, constraint));
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DeleteEntitiesDirectly";
	}

	// BEGIN EXTRA CODE
	private Function<Connection, Long> deleteEntities(String entity, String constraint) throws Exception {
		return connection -> {
			try {
				ILogNode logger = Core.getLogger(this.getClass().getSimpleName());
				Long result;
			
				if (connection.getAutoCommit()) {
					connection.setAutoCommit(false);
				}
				HashSet<String> processedAssociations = new HashSet<String>();
				
				IMetaObject metaObject = Core.getMetaObject(entity);
				final String associationBaseQuery = "SELECT id FROM " + Core.getDatabaseTableName(metaObject) + " WHERE " + constraint;
				for(IMetaAssociation childAssociation : metaObject.getDeclaredMetaAssociationsChild()) {
					if (isAssociationToNPE(childAssociation)) // these can't be deleted because they're not stored
						continue; 
					
					String deleteXTblAsChildQuery = "DELETE FROM " + Core.getDatabaseTableName(childAssociation) + " WHERE " +
							Core.getDatabaseChildColumnName(childAssociation) + " IN (" + associationBaseQuery + ")";
					Statement statement = connection.createStatement();
					logger.trace("Deleting records for child association of " + entity + ":" + childAssociation.getName() + 
							" using: " + deleteXTblAsChildQuery);
					try {
						statement.executeUpdate(deleteXTblAsChildQuery);
					} finally {
						statement.close();
					}
					processedAssociations.add(childAssociation.getName());
				}
				
				for(IMetaAssociation parentAssociation : metaObject.getDeclaredMetaAssociationsParent()) {
					if (isAssociationToNPE(parentAssociation)) // these can't be deleted because they're not stored
						continue; 
					
					if (processedAssociations.contains(parentAssociation.getName())) {
						continue;
					}
					String deleteXTblAsParentQuery = "DELETE FROM " + Core.getDatabaseTableName(parentAssociation) + " WHERE " +
							Core.getDatabaseParentColumnName(parentAssociation) + " IN (" + associationBaseQuery + ")";
					Statement statement = connection.createStatement();
					logger.trace("Deleting records for parent association of " + entity + ":" + parentAssociation.getName() + 
							" using: " + deleteXTblAsParentQuery);
					try {
						statement.executeUpdate(deleteXTblAsParentQuery);
					} finally {
						statement.close();
					}
					processedAssociations.add(parentAssociation.getName());
				}
				
				Statement statement = connection.createStatement();
				try {
					String deleteEntityQuery = "DELETE FROM " + Core.getDatabaseTableName(metaObject) + " WHERE " + constraint;
					logger.trace(deleteEntityQuery);
					result = (long) statement.executeUpdate(deleteEntityQuery);
				} finally {
					statement.close();
				}
				
				connection.commit();
				return result;
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		};
	}
	
	private boolean isAssociationToNPE(IMetaAssociation a) throws CoreException {
		return (!a.getChild().isPersistable() || !a.getParent().isPersistable());
	}
	// END EXTRA CODE
}
