// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxdbutils.actions;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.function.Function;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import mxdbutils.proxies.Query;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ExecuteQuery extends CustomJavaAction<java.lang.Long>
{
	private IMendixObject __query;
	private mxdbutils.proxies.Query query;

	public ExecuteQuery(IContext context, IMendixObject query)
	{
		super(context);
		this.__query = query;
	}

	@java.lang.Override
	public java.lang.Long executeAction() throws Exception
	{
		this.query = __query == null ? null : mxdbutils.proxies.Query.initialize(getContext(), __query);

		// BEGIN USER CODE
		Long result = Core.dataStorage().executeWithConnection(executeQuery(getContext(), query));
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteQuery";
	}

	// BEGIN EXTRA CODE
	private static ILogNode logger = Core.getLogger(ExecuteQuery.class.getSimpleName());
	
	private Function<Connection, Long> executeQuery(IContext context, Query queryObject) throws Exception {
		return connection ->
		{
			try {
				Statement stat = connection.createStatement();
				StringBuffer csv = new StringBuffer();
				
				switch (queryObject.getquery_type()) {
				case UPDATE:
					int nr = stat.executeUpdate(queryObject.getsql());
					csv.append("Amount of records\r\n");
					csv.append(Integer.toString(nr));
					stat.close();
					return (long) nr;
				case SELECT:
					ResultSet rs = stat.executeQuery(queryObject.getsql());
					ResultSetMetaData md = rs.getMetaData();
				
					for(int i = 0; i < md.getColumnCount(); i++) {
						csv.append(md.getColumnName(i + 1));
						csv.append(",");
					}
					csv.append("\r\n");
					
					while (rs.next()) {
						for (int i = 0; i < md.getColumnCount(); i++) {
							Object value = rs.getObject(i + 1);
							if (value != null) {
								csv.append(value.toString());
							}
										
							csv.append(",");
						}
						csv.append("\r\n");
					}
					rs.close();
					stat.close();
				}
				query.setcsv(csv.toString());
				} catch (Exception e) {
					logger.error("Error while executing SQL: " +e.getMessage(), e);
					throw new RuntimeException(e);
				}
				return 0L;
			};
	}
	// END EXTRA CODE
}
