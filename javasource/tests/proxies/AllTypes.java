// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package tests.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.objectmanagement.member.MendixBinary;

/**
 * 
 */
public class AllTypes
{
	private final IMendixObject allTypesMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "Tests.AllTypes";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		StringValue("StringValue"),
		LongValue("LongValue"),
		IntegerValue("IntegerValue"),
		HashedStringValue("HashedStringValue"),
		FloatValue("FloatValue"),
		EnumValue("EnumValue"),
		DecimalValue("DecimalValue"),
		CurrencyValue("CurrencyValue"),
		BooleanValue("BooleanValue"),
		BinaryValue("BinaryValue"),
		DateTimeValue("DateTimeValue"),
		String2Value("String2Value");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public AllTypes(IContext context)
	{
		this(context, Core.instantiate(context, "Tests.AllTypes"));
	}

	protected AllTypes(IContext context, IMendixObject allTypesMendixObject)
	{
		if (allTypesMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("Tests.AllTypes", allTypesMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a Tests.AllTypes");

		this.allTypesMendixObject = allTypesMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'AllTypes.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static tests.proxies.AllTypes initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return tests.proxies.AllTypes.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static tests.proxies.AllTypes initialize(IContext context, IMendixObject mendixObject)
	{
		return new tests.proxies.AllTypes(context, mendixObject);
	}

	public static tests.proxies.AllTypes load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return tests.proxies.AllTypes.initialize(context, mendixObject);
	}

	public static java.util.List<tests.proxies.AllTypes> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<tests.proxies.AllTypes> result = new java.util.ArrayList<tests.proxies.AllTypes>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//Tests.AllTypes" + xpathConstraint))
			result.add(tests.proxies.AllTypes.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of StringValue
	 */
	public final String getStringValue()
	{
		return getStringValue(getContext());
	}

	/**
	 * @param context
	 * @return value of StringValue
	 */
	public final String getStringValue(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.StringValue.toString());
	}

	/**
	 * Set value of StringValue
	 * @param stringvalue
	 */
	public final void setStringValue(String stringvalue)
	{
		setStringValue(getContext(), stringvalue);
	}

	/**
	 * Set value of StringValue
	 * @param context
	 * @param stringvalue
	 */
	public final void setStringValue(IContext context, String stringvalue)
	{
		getMendixObject().setValue(context, MemberNames.StringValue.toString(), stringvalue);
	}

	/**
	 * @return value of LongValue
	 */
	public final Long getLongValue()
	{
		return getLongValue(getContext());
	}

	/**
	 * @param context
	 * @return value of LongValue
	 */
	public final Long getLongValue(IContext context)
	{
		return (Long) getMendixObject().getValue(context, MemberNames.LongValue.toString());
	}

	/**
	 * Set value of LongValue
	 * @param longvalue
	 */
	public final void setLongValue(Long longvalue)
	{
		setLongValue(getContext(), longvalue);
	}

	/**
	 * Set value of LongValue
	 * @param context
	 * @param longvalue
	 */
	public final void setLongValue(IContext context, Long longvalue)
	{
		getMendixObject().setValue(context, MemberNames.LongValue.toString(), longvalue);
	}

	/**
	 * @return value of IntegerValue
	 */
	public final Integer getIntegerValue()
	{
		return getIntegerValue(getContext());
	}

	/**
	 * @param context
	 * @return value of IntegerValue
	 */
	public final Integer getIntegerValue(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.IntegerValue.toString());
	}

	/**
	 * Set value of IntegerValue
	 * @param integervalue
	 */
	public final void setIntegerValue(Integer integervalue)
	{
		setIntegerValue(getContext(), integervalue);
	}

	/**
	 * Set value of IntegerValue
	 * @param context
	 * @param integervalue
	 */
	public final void setIntegerValue(IContext context, Integer integervalue)
	{
		getMendixObject().setValue(context, MemberNames.IntegerValue.toString(), integervalue);
	}

	/**
	 * Set value of HashedStringValue
	 * @param hashedstringvalue
	 */
	public final void setHashedStringValue(String hashedstringvalue)
	{
		setHashedStringValue(getContext(), hashedstringvalue);
	}

	/**
	 * Set value of HashedStringValue
	 * @param context
	 * @param hashedstringvalue
	 */
	public final void setHashedStringValue(IContext context, String hashedstringvalue)
	{
		getMendixObject().setValue(context, MemberNames.HashedStringValue.toString(), hashedstringvalue);
	}

	/**
	 * @return value of FloatValue
	 */
	public final Double getFloatValue()
	{
		return getFloatValue(getContext());
	}

	/**
	 * @param context
	 * @return value of FloatValue
	 */
	public final Double getFloatValue(IContext context)
	{
		return (Double) getMendixObject().getValue(context, MemberNames.FloatValue.toString());
	}

	/**
	 * Set value of FloatValue
	 * @param floatvalue
	 */
	public final void setFloatValue(Double floatvalue)
	{
		setFloatValue(getContext(), floatvalue);
	}

	/**
	 * Set value of FloatValue
	 * @param context
	 * @param floatvalue
	 */
	public final void setFloatValue(IContext context, Double floatvalue)
	{
		getMendixObject().setValue(context, MemberNames.FloatValue.toString(), floatvalue);
	}

	/**
	 * Set value of EnumValue
	 * @param enumvalue
	 */
	public final tests.proxies.YesNoEnum getEnumValue()
	{
		return getEnumValue(getContext());
	}

	/**
	 * @param context
	 * @return value of EnumValue
	 */
	public final tests.proxies.YesNoEnum getEnumValue(IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.EnumValue.toString());
		if (obj == null)
			return null;

		return tests.proxies.YesNoEnum.valueOf((String) obj);
	}

	/**
	 * Set value of EnumValue
	 * @param enumvalue
	 */
	public final void setEnumValue(tests.proxies.YesNoEnum enumvalue)
	{
		setEnumValue(getContext(), enumvalue);
	}

	/**
	 * Set value of EnumValue
	 * @param context
	 * @param enumvalue
	 */
	public final void setEnumValue(IContext context, tests.proxies.YesNoEnum enumvalue)
	{
		if (enumvalue != null)
			getMendixObject().setValue(context, MemberNames.EnumValue.toString(), enumvalue.toString());
		else
			getMendixObject().setValue(context, MemberNames.EnumValue.toString(), null);
	}

	/**
	 * @return value of DecimalValue
	 */
	public final java.math.BigDecimal getDecimalValue()
	{
		return getDecimalValue(getContext());
	}

	/**
	 * @param context
	 * @return value of DecimalValue
	 */
	public final java.math.BigDecimal getDecimalValue(IContext context)
	{
		return (java.math.BigDecimal) getMendixObject().getValue(context, MemberNames.DecimalValue.toString());
	}

	/**
	 * Set value of DecimalValue
	 * @param decimalvalue
	 */
	public final void setDecimalValue(java.math.BigDecimal decimalvalue)
	{
		setDecimalValue(getContext(), decimalvalue);
	}

	/**
	 * Set value of DecimalValue
	 * @param context
	 * @param decimalvalue
	 */
	public final void setDecimalValue(IContext context, java.math.BigDecimal decimalvalue)
	{
		getMendixObject().setValue(context, MemberNames.DecimalValue.toString(), decimalvalue);
	}

	/**
	 * @return value of CurrencyValue
	 */
	public final Double getCurrencyValue()
	{
		return getCurrencyValue(getContext());
	}

	/**
	 * @param context
	 * @return value of CurrencyValue
	 */
	public final Double getCurrencyValue(IContext context)
	{
		return (Double) getMendixObject().getValue(context, MemberNames.CurrencyValue.toString());
	}

	/**
	 * Set value of CurrencyValue
	 * @param currencyvalue
	 */
	public final void setCurrencyValue(Double currencyvalue)
	{
		setCurrencyValue(getContext(), currencyvalue);
	}

	/**
	 * Set value of CurrencyValue
	 * @param context
	 * @param currencyvalue
	 */
	public final void setCurrencyValue(IContext context, Double currencyvalue)
	{
		getMendixObject().setValue(context, MemberNames.CurrencyValue.toString(), currencyvalue);
	}

	/**
	 * @return value of BooleanValue
	 */
	public final Boolean getBooleanValue()
	{
		return getBooleanValue(getContext());
	}

	/**
	 * @param context
	 * @return value of BooleanValue
	 */
	public final Boolean getBooleanValue(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.BooleanValue.toString());
	}

	/**
	 * Set value of BooleanValue
	 * @param booleanvalue
	 */
	public final void setBooleanValue(Boolean booleanvalue)
	{
		setBooleanValue(getContext(), booleanvalue);
	}

	/**
	 * Set value of BooleanValue
	 * @param context
	 * @param booleanvalue
	 */
	public final void setBooleanValue(IContext context, Boolean booleanvalue)
	{
		getMendixObject().setValue(context, MemberNames.BooleanValue.toString(), booleanvalue);
	}

	/**
	  * The contents of the binary field will be written to the output stream.
	  * The output stream will be closed at the end.
	  *
	  * @param context
	  * @param outputStream
	  */
	public final void getBinaryValue(IContext context, java.io.OutputStream outputStream)
	{
		MendixBinary binary = (MendixBinary) getMendixObject().getMember(context, MemberNames.BinaryValue.toString());
		binary.retrieveValue(context, outputStream);
	}

	/**
	  * Stores the bytes from the given InputStream.
	  *
	  * Please note that the input stream will be immediately sent to the data store,
	  * whether you commit the Mendix object or not.
	  *
	  * @param context
	  * @param inputStream
	  * @param length the number of bytes in the stream
	  */
	public final void setBinaryValue(IContext context, java.io.InputStream inputStream, long length)
	{
		if (getMendixObject().getState() == IMendixObject.ObjectState.INSTANTIATED)
			try { commit(); } catch (CoreException ex) { }
		MendixBinary binary = (MendixBinary) getMendixObject().getMember(context, MemberNames.BinaryValue.toString());
		binary.storeValue(context, inputStream, length);
	}

	/**
	 * @return value of DateTimeValue
	 */
	public final java.util.Date getDateTimeValue()
	{
		return getDateTimeValue(getContext());
	}

	/**
	 * @param context
	 * @return value of DateTimeValue
	 */
	public final java.util.Date getDateTimeValue(IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.DateTimeValue.toString());
	}

	/**
	 * Set value of DateTimeValue
	 * @param datetimevalue
	 */
	public final void setDateTimeValue(java.util.Date datetimevalue)
	{
		setDateTimeValue(getContext(), datetimevalue);
	}

	/**
	 * Set value of DateTimeValue
	 * @param context
	 * @param datetimevalue
	 */
	public final void setDateTimeValue(IContext context, java.util.Date datetimevalue)
	{
		getMendixObject().setValue(context, MemberNames.DateTimeValue.toString(), datetimevalue);
	}

	/**
	 * @return value of String2Value
	 */
	public final String getString2Value()
	{
		return getString2Value(getContext());
	}

	/**
	 * @param context
	 * @return value of String2Value
	 */
	public final String getString2Value(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.String2Value.toString());
	}

	/**
	 * Set value of String2Value
	 * @param string2value
	 */
	public final void setString2Value(String string2value)
	{
		setString2Value(getContext(), string2value);
	}

	/**
	 * Set value of String2Value
	 * @param context
	 * @param string2value
	 */
	public final void setString2Value(IContext context, String string2value)
	{
		getMendixObject().setValue(context, MemberNames.String2Value.toString(), string2value);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return allTypesMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final tests.proxies.AllTypes that = (tests.proxies.AllTypes) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "Tests.AllTypes";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
