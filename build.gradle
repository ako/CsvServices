/* use:
 * Download all dependencies - \programs\gradle-3.5\bin\gradle getTestRuntimeLibs
 * Download just the export dependencies -  \programs\gradle-3.5\bin\gradle getExportLibs
 */

apply plugin: 'java'
sourceCompatibility = '11'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
compileJava.destinationDirectory = file("$rootDir/deployment/run/bin")

repositories {
    mavenCentral()
    flatDir {
        dirs '/c://Program Files/Mendix/9.24.3.8044/runtime/bundles'
    }
}

configurations {
    appstoreModuleImplementation.extendsFrom(implementation)
}

test {
    useJUnitPlatform()
}

dependencies {
    // public mendix runtime jars
    implementation name:'com.mendix.public-api'
    implementation name: 'com.mendix.json'
    implementation name: 'com.mendix.logging-api'
    implementation name: 'com.mendix.m2ee-api'
    implementation name: 'javax.servlet.servlet-api'
    implementation group: 'net.datafaker', name: 'datafaker', version: '1.9.0'

    // test
    //implementation("org.junit.jupiter:junit-jupiter:5.9.1")
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")
    //testCompileOnly(sourceSets.main.output)
    //testCompile sourceSets.main.output

    // export module
    appstoreModuleImplementation group: 'net.datafaker', name: 'datafaker', version: '1.9.0'
}

clean {
    delete "userlib"
    delete "deployment/run/bin"
}


sourceSets {
    main {
        java {
            srcDirs = ['javasource']
            destinationDirectory.set(file("$rootDir/deployment/run/bin"))
        }
        resources {
            srcDirs = ['resources']
        }

    }
    test {
        java {
            srcDirs = ['javasource-test']
            //compileClasspath += sourceSets.main.output
            //runtimeClasspath += sourceSets.main.output
            destinationDirectory.set(file("$rootDir/deployment/run/bin"))
        }
        resources {
            srcDirs = ['resources-test']
        }
    }
    appstoreModule {
            //compileClasspath += sourceSets.main.output
            //runtimeClasspath += sourceSets.main.output
    }
}

task getTestRuntimelibs(type: Copy) {
    from sourceSets.test.runtimeClasspath
    into 'userlib/'
}

task getExportLibs(type: Copy) {
    doFirst {
        delete fileTree(dir: "userlib")
    }
    from sourceSets['appstoreModule'].runtimeClasspath
    into 'userlib/'
    doLast {
        files { file('userlib').listFiles() }.each { File file ->
            println "file found: $file.name"
            def keepFilename = 'userlib/' + file.name + '.CsvServices.RequiredLib'
            ant.touch(file: keepFilename)
        }
    }
}

task exportModule(type: Exec,dependsOn: 'getExportLibs'){
    commandLine "\\Program Files\\Mendix\\9.24.3.8044\\modeler\\mxutil.exe", "create-module-package", "CsvServices.mpr", "CsvServices", "--package-dir=DIST"
    doLast {
        copy {
            from 'DIST'
            include 'CsvServices.mpk'
            into 'DIST'
            rename 'CsvServices.mpk', 'CsvServices-2.5.mpk'
        }
    }
}

task runTestMain(type: JavaExec){
    dependsOn classes
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'tests.impl.TestMain'
}
task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            println ""
        }
    }
}